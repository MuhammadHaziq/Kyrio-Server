router.post("/save_csv", async (req, res) => {
  try {
    var errors = [];
    const { account, _id } = req.authData;
    let { csvData } = req.body;
    csvData = JSON.parse(csvData);

    let skuErrors = [];
    let handleErrors = [];
    let NameLength = [];
    let handleLength = [];

    skuErrors = checkDuplicate(
      (csvData || []).map((item, index) => {
        return item.SKU;
      })
    );
    handleErrors = checkDuplicate(
      (csvData || []).map((item, index) => {
        return item.Handle;
      })
    );
    NameLength = (csvData || [])
      .map((item, index) => {
        return item.Name !== undefined && item.Name !== null
          ? item.Name.length > 63
            ? { index: index, value: item.Name.length }
            : { index: index, value: null }
          : { index: index, value: null };
      })
      .filter((item) => {
        return item.value !== null;
      });
    handleLength = (csvData || [])
      .map((item, index) => {
        return item.Handle !== undefined && item.Handle !== null
          ? item.Handle.length > 71
            ? { index: index, value: item.Handle.length }
            : { index: index, value: null }
          : { index: index, value: null };
      })
      .filter((item) => {
        return item.value !== null;
      });
    errors.push({
      skuErrors: skuErrors,
      handleErrors: handleErrors,
      NameLength: NameLength,
      handleLength: handleLength,
    });
    if (
      typeof skuErrors !== "undefined" &&
      typeof handleErrors !== "undefined" &&
      typeof NameLength !== "undefined"
    ) {
      if (
        skuErrors.length > 0 ||
        handleErrors.length > 0 ||
        NameLength.length > 0
      ) {
        res.status(400).json(errors);
      }
    }

    let data = [];
    var i = 0;
    let groupSkuErrors = [];
    let groupHandleErrors = [];
    let groupNameErrors = [];
    for (const item of csvData) {
      if (
        (typeof item.SKU !== "undefined" ||
          typeof item.SKU !== "null" ||
          item.SKU !== null ||
          item.SKU !== undefined ||
          item.SKU !== "") &&
        (item.Name !== "" ||
          item.Name !== undefined ||
          item.Name !== null ||
          typeof item.Name !== "undefined" ||
          typeof item.Name !== "null") &&
        (typeof item.Handle !== "undefined" ||
          typeof item.Handle !== "null" ||
          item.Handle !== null ||
          item.Handle !== undefined ||
          item.Handle !== "")
      ) {
        let storeData = [];
        let modifierData = [];
        let varientName = [];
        let varientValue1 = [];
        let varientValue2 = [];
        let varientValue3 = [];
        var keys = Object.keys(item);
        (keys || []).map(async (ite, iteIndex) => {
          let getStore = ite.match(/([^[\]]+|\[\])/g).map(function (val) {
            return val === "[]" ? null : val;
          })[1];
          const stores = await Store.find().sort({
            _id: "desc",
          });
          (stores || []).map(async (stor, storIndex) => {
            if (getStore !== undefined && getStore !== null) {
              // if (ite == `Available for sale [${stor.title}]`) {
              if (getStore.trim() == stor.title.trim()) {
                return storeData.push({
                  id: stor._id,
                  title: stor.title,
                  price:
                    typeof item[`Price [${stor.title}]`] !== "undefined" &&
                    typeof item[`Price [${stor.title}]`] !== "null" &&
                    !isNaN(item[`Price [${stor.title}]`]) &&
                    item[`Price [${stor.title}]`] !== null &&
                    item[`Price [${stor.title}]`] !== ""
                      ? parseFloat(item[`Price [${stor.title}]`])
                      : 0,
                  inStock:
                    typeof item[`In stock [${stor.title}]`] !== "undefined" &&
                    typeof item[`In stock [${stor.title}]`] !== "null" &&
                    !isNaN(item[`In stock [${stor.title}]`]) &&
                    item[`In stock [${stor.title}]`] !== null &&
                    item[`In stock [${stor.title}]`] !== ""
                      ? item[`In stock [${stor.title}]`]
                      : 0,
                  lowStock:
                    typeof item[`Low stock [${stor.title}]`] !== "undefined" &&
                    typeof item[`Low stock [${stor.title}]`] !== "null" &&
                    !isNaN(item[`Low stock [${stor.title}]`]) &&
                    item[`Low stock [${stor.title}]`] !== null &&
                    item[`Low stock [${stor.title}]`] !== ""
                      ? item[`Low stock [${stor.title}]`]
                      : 0,
                  variantName: "",
                  modifiers: Modifier.find({
                    stores: { $elemMatch: { id: stor._id } },
                  })
                    .select("title")
                    .sort({
                      _id: "desc",
                    }),
                  taxes: itemTax
                    .find({
                      stores: { $elemMatch: { storeId: stor._id } },
                      account: account,
                    })
                    .select("title tax_type tax_rate")
                    .sort({ _id: "desc" }),
                });
              } else {
                const newStore = new Store({
                  title: getStore,
                  address: "",
                  phone: "",
                  description: "",
                  createdBy: _id,
                  account: account,
                });
                try {
                  const result = await newStore.save();
                  return storeData.push({
                    id: result._id,
                    title: result.title,
                    price:
                      typeof item[`Price [${getStore}]`] !== "undefined" &&
                      typeof item[`Price [${getStore}]`] !== "null" &&
                      !isNaN(item[`Price [${getStore}]`]) &&
                      item[`Price [${getStore}]`] !== null &&
                      item[`Price [${getStore}]`] !== ""
                        ? parseFloat(item[`Price [${getStore}]`])
                        : 0,
                    inStock:
                      typeof item[`In stock [${getStore}]`] !== "undefined" &&
                      typeof item[`In stock [${getStore}]`] !== "null" &&
                      !isNaN(item[`In stock [${getStore}]`]) &&
                      item[`In stock [${getStore}]`] !== null &&
                      item[`In stock [${getStore}]`] !== ""
                        ? item[`In stock [${getStore}]`]
                        : 0,
                    lowStock:
                      typeof item[`Low stock [${getStore}]`] !== "undefined" &&
                      typeof item[`Low stock [${getStore}]`] !== "null" &&
                      !isNaN(item[`Low stock [${getStore}]`]) &&
                      item[`Low stock [${getStore}]`] !== null &&
                      item[`Low stock [${getStore}]`] !== ""
                        ? item[`Low stock [${getStore}]`]
                        : 0,
                    variantName: "",
                    modifiers: Modifier.find({
                      stores: { $elemMatch: { id: result._id } },
                    })
                      .select("title")
                      .sort({
                        _id: "desc",
                      }),
                    taxes: itemTax
                      .find({
                        stores: { $elemMatch: { storeId: result._id } },
                        account: account,
                      })
                      .select("title tax_type tax_rate")
                      .sort({ _id: "desc" }),
                  });
                } catch (error) {
                  if (error.code === 11000) {
                    // console.log({ message: "Store Already Register" });
                    // res.status(400).json({ message: "Store Already Register By This User" });
                  } else {
                    // console.log({ message: error.message });
                    // res.status(400).json({ message: error.message });
                  }
                }
              }
            }
          });
          const modifier = await Modifier.find().sort({
            _id: "desc",
          });
          (modifier || []).map((modi, modiIndex) => {
            if (
              `Modifier - "${modi.title}"` == ite ||
              `Modifier-${modi.title}` == ite
            ) {
              modifierData.push({
                id: modi._id,
                title: modi.title,
              });
            }
          });
        });

        const getSameHandle = (csvData || []).filter(
          (filterVar, varIndex) => filterVar.Handle == item.Handle
        );
        // if (item.Name !== "" || item.Name !== undefined || item.Name !== null) {
        if (
          getSameHandle[0]["Option 1 name"] !== "" ||
          getSameHandle[0]["Option 1 name"] !== undefined ||
          getSameHandle[0]["Option 1 name"] !== null
        ) {
          getSameHandle.map((itemVar, varIndex) => {
            if (
              itemVar["Option 1 value"] !== "" ||
              itemVar["Option 1 value"] !== undefined ||
              itemVar["Option 1 value"] !== null
            ) {
              varientValue1.push({
                price:
                  typeof itemVar["Default price"] !== "undefined" &&
                  typeof itemVar["Default price"] !== "null" &&
                  !isNaN(itemVar["Default price"]) &&
                  itemVar["Default price"] !== null &&
                  itemVar["Default price"] !== ""
                    ? parseFloat(itemVar["Default price"])
                    : 0,
                cost:
                  typeof itemVar.Cost !== "undefined" &&
                  typeof itemVar.Cost !== "null" &&
                  !isNaN(itemVar.Cost) &&
                  itemVar.Cost !== null &&
                  itemVar.Cost !== ""
                    ? parseFloat(itemVar.Cost)
                    : 0,
                sku: Number(itemVar.SKU).toPrecision(),
                barcode: Number(itemVar.Barcode).toPrecision(),
                variantName: itemVar["Option 1 value"],
              });
            }
          });
          if (varientValue1.length > 0) {
            varientName.push({
              optionName: getSameHandle[0]["Option 1 name"],
              optionValue: varientValue1,
            });
          }
        }
        if (
          getSameHandle[0]["Option 2 name"] !== "" ||
          getSameHandle[0]["Option 2 name"] !== undefined ||
          getSameHandle[0]["Option 2 name"] !== null
        ) {
          getSameHandle.map((itemVar, varIndex) => {
            if (
              itemVar["Option 2 value"] !== "" ||
              itemVar["Option 2 value"] !== undefined ||
              itemVar["Option 2 value"] !== null
            ) {
              varientValue2.push({
                price:
                  typeof itemVar["Default price"] !== "undefined" &&
                  typeof itemVar["Default price"] !== "null" &&
                  !isNaN(itemVar["Default price"]) &&
                  itemVar["Default price"] !== null &&
                  itemVar["Default price"] !== ""
                    ? parseFloat(itemVar["Default price"])
                    : 0,
                cost:
                  typeof itemVar.Cost !== "undefined" &&
                  typeof itemVar.Cost !== "null" &&
                  itemVar.Cost !== null &&
                  !isNaN(itemVar.Cost) &&
                  itemVar.Cost !== ""
                    ? parseFloat(itemVar.Cost)
                    : 0,
                sku: Number(itemVar.SKU).toPrecision(),
                barcode: Number(itemVar.Barcode).toPrecision(),
                variantName: itemVar["Option 2 value"],
              });
            }
          });
          if (varientValue2.length > 0) {
            varientName.push({
              optionName: getSameHandle[0]["Option 2 name"],
              optionValue: varientValue2,
            });
          }
        }
        if (
          getSameHandle[0]["Option 3 name"] !== "" ||
          getSameHandle[0]["Option 3 name"] !== undefined ||
          getSameHandle[0]["Option 3 name"] !== null
        ) {
          getSameHandle.map((itemVar, varIndex) => {
            if (
              itemVar["Option 3 value"] !== "" ||
              itemVar["Option 3 value"] !== undefined ||
              itemVar["Option 3 value"] !== null
            ) {
              varientValue3.push({
                price:
                  typeof itemVar["Default price"] !== "undefined" &&
                  typeof itemVar["Default price"] !== "null" &&
                  !isNaN(itemVar["Default price"]) &&
                  itemVar["Default price"] !== null &&
                  itemVar["Default price"] !== ""
                    ? parseFloat(itemVar["Default price"])
                    : 0,
                cost:
                  typeof itemVar.Cost !== "undefined" &&
                  typeof itemVar.Cost !== "null" &&
                  !isNaN(itemVar.Cost) &&
                  itemVar.Cost !== null &&
                  itemVar.Cost !== ""
                    ? parseFloat(itemVar.Cost)
                    : 0,
                sku: Number(itemVar.SKU).toPrecision(),
                barcode: Number(itemVar.Barcode).toPrecision(),
                variantName: itemVar["Option 3 value"],
              });
            }
          });
          if (varientValue3.length > 0) {
            varientName.push({
              optionName: getSameHandle[0]["Option 3 name"],
              optionValue: varientValue3,
            });
          }
        }
        // }
        let category = {};
        try {
          await Category.find({ catTitle: item.Category })
            .then((catData) => {
              if (catData !== null && catData.length !== 0) {
                category = {
                  id: catData[0]._id,
                  name: catData[0].catTitle,
                };
              }
            })
            .catch((err) => {
              console.log("Category", err.message);
            });
        } catch (err) {
          console.log("Category", err.message);
        }

        // if (item.Name !== "" || item.Name !== undefined || item.Name !== null) {
        const Exist = await ItemList.find({
          name: item.Name,
          sku: Number(item.SKU).toPrecision(),
        }).sort({ _id: "desc" });
        if (Exist.length > 0 && Exist !== null) {
          try {
            const newItemList = {
              name: item.Name,
              account: account,
              category: category,
              soldByType:
                item["Sold by weight"] == "N" ? "Each" : "Sold by weight",
              price:
                typeof item["Default price"] !== "undefined" &&
                typeof item["Default price"] !== "null" &&
                item["Default price"] !== null &&
                !isNaN(item["Default price"]) &&
                item["Default price"] !== ""
                  ? parseFloat(item["Default price"])
                  : 0,
              cost:
                typeof item.Cost !== "undefined" &&
                typeof item.Cost !== "null" &&
                item.Cost !== null &&
                !isNaN(item.Cost) &&
                item.Cost !== ""
                  ? parseFloat(item.Cost)
                  : 0,
              sku: Number(item.SKU).toPrecision(),
              barcode: Number(item.Barcode).toPrecision(),
              trackStock: item["Track stock"] == "N" ? false : true,
              varients: varientName.length === 0 ? null : varientName,
              stores: storeData,
              modifiers: modifierData,
              taxes: [],
              repoOnPos: "Color_and_shape",
              image: "",
              color: "",
              shape: "",
              availableForSale: false,
              created_by: _id,
            };
            await ItemList.findOneAndUpdate(
              {
                name: item.Name,
                sku: Number(item.SKU).toPrecision(),
              },
              newItemList
            );
            // res.status(201).json(result);
          } catch (error) {
            console.log("Durning Update", error.message);
            // res.status(400).json({ message: error.message });
          }
        } else {
          data.push({
            name: item.Name,
            account: account,
            category: category,
            soldByType:
              item["Sold by weight"] == "N" ? "Each" : "Sold by weight",
            price:
              typeof item["Default price"] !== "undefined" &&
              typeof item["Default price"] !== "null" &&
              item["Default price"] !== null &&
              !isNaN(item["Default price"]) &&
              item["Default price"] !== ""
                ? parseFloat(item["Default price"])
                : 0,
            cost:
              typeof item.Cost !== "undefined" &&
              typeof item.Cost !== "null" &&
              item.Cost !== null &&
              !isNaN(item.Cost) &&
              item.Cost !== ""
                ? parseFloat(item.Cost)
                : 0,
            sku: Number(item.SKU).toPrecision(),
            barcode: Number(item.Barcode).toPrecision(),
            trackStock: item["Track stock"] == "N" ? false : true,
            varients: varientName.length === 0 ? null : varientName,
            stores: storeData,
            modifiers: modifierData,
            taxes: [],
            repoOnPos: "Color_and_shape",
            image: "",
            color: "",
            shape: "",
            availableForSale: false,
            created_by: _id,
          });
        }

        // }
      }
      if (
        typeof item.Name === "undefined" ||
        typeof item.Name === "null" ||
        item.Name === null ||
        item.Name === undefined ||
        item.Name === ""
      ) {
        groupNameErrors.push({
          index: i,
        });
      }
      if (
        typeof item.SKU === "undefined" ||
        typeof item.SKU === "null" ||
        item.SKU === null ||
        item.SKU === undefined ||
        item.SKU === ""
      ) {
        groupSkuErrors.push({
          index: i,
        });
      }
      if (
        typeof item.Handle === "undefined" ||
        typeof item.Handle === "null" ||
        item.Handle === null ||
        item.Handle === undefined ||
        item.Handle === ""
      ) {
        groupHandleErrors.push({
          index: i,
        });
      }

      console.log("i", i++);
      console.log("csvData.length", csvData.length);
    }

    if (
      typeof groupSkuErrors !== "undefined" &&
      typeof groupHandleErrors !== "undefined" &&
      typeof groupNameErrors !== "undefined"
    ) {
      if (
        groupSkuErrors.length > 0 ||
        groupHandleErrors.length > 0 ||
        groupNameErrors.length > 0
      ) {
        errors.push({
          groupSkuErrors: groupSkuErrors,
          groupHandleErrors: groupHandleErrors,
          groupNameErrors: groupNameErrors,
        });
        res.status(400).json(errors);
      }
    }
    try {
      ItemList.insertMany(data)
        .then(() => {
          console.log("Data inserted"); // Success
          res.status(200).send({ message: "Record Save Successfully" });
        })
        .catch((error) => {
          console.log(error); // Failure
          res.status(400).json({ message: error.message });
        });
    } catch (error) {
      console.log("Durning Insert", error.message);
      res.status(400).json({ message: err.message });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});
